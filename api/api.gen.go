// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Customer defines model for Customer.
type Customer struct {
	ContactEmail  *string             `json:"contactEmail,omitempty"`
	ContactPerson *string             `json:"contactPerson,omitempty"`
	CreatedAt     *time.Time          `json:"createdAt,omitempty"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          *string             `json:"name,omitempty"`
	ProjectId     *openapi_types.UUID `json:"projectId,omitempty"`
	UpdatedAt     *time.Time          `json:"updatedAt,omitempty"`
}

// CustomerWithProjectProgress defines model for CustomerWithProjectProgress.
type CustomerWithProjectProgress struct {
	ContactEmail    *string             `json:"contactEmail,omitempty"`
	ContactPerson   *string             `json:"contactPerson,omitempty"`
	CreatedAt       *time.Time          `json:"createdAt,omitempty"`
	Id              *openapi_types.UUID `json:"id,omitempty"`
	Name            *string             `json:"name,omitempty"`
	ProjectId       *openapi_types.UUID `json:"projectId,omitempty"`
	ProjectProgress *[]ProjectProgress  `json:"projectProgress,omitempty"`
	UpdatedAt       *time.Time          `json:"updatedAt,omitempty"`
}

// Error defines model for Error.
type Error struct {
	ErrorCode string `json:"ErrorCode"`
	Message   string `json:"Message"`
	Error     string `json:"error"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt *time.Time          `json:"createdAt,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Name      *string             `json:"name,omitempty"`
	UpdatedAt *time.Time          `json:"updatedAt,omitempty"`
}

// ProjectProgress defines model for ProjectProgress.
type ProjectProgress struct {
	ContactEmail *string             `json:"contactEmail,omitempty"`
	CreatedAt    *time.Time          `json:"createdAt,omitempty"`
	CustomerName *string             `json:"customerName,omitempty"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Message      *string             `json:"message,omitempty"`
	Name         *string             `json:"name,omitempty"`
	ProjectId    *openapi_types.UUID `json:"projectId,omitempty"`
	StartTime    *time.Time          `json:"startTime,omitempty"`
	SubStageId   *openapi_types.UUID `json:"subStageId,omitempty"`
	UpdatedAt    *time.Time          `json:"updatedAt,omitempty"`
}

// Stage defines model for Stage.
type Stage struct {
	CreatedAt   *time.Time          `json:"createdAt,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	ProjectId   *openapi_types.UUID `json:"projectId,omitempty"`
	UpdatedAt   *time.Time          `json:"updatedAt,omitempty"`
}

// StageWithSubStages defines model for StageWithSubStages.
type StageWithSubStages struct {
	CreatedAt   *time.Time          `json:"createdAt,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	ProjectId   *openapi_types.UUID `json:"projectId,omitempty"`
	SubStages   *[]SubStage         `json:"subStages,omitempty"`
	UpdatedAt   *time.Time          `json:"updatedAt,omitempty"`
}

// SubStage defines model for SubStage.
type SubStage struct {
	CreatedAt *time.Time          `json:"createdAt,omitempty"`
	Duration  *int                `json:"duration,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Name      *string             `json:"name,omitempty"`
	StageId   *openapi_types.UUID `json:"stageId,omitempty"`
	StartTime *time.Time          `json:"startTime,omitempty"`
	UpdatedAt *time.Time          `json:"updatedAt,omitempty"`
}

// PostAuthRequestOtpJSONBody defines parameters for PostAuthRequestOtp.
type PostAuthRequestOtpJSONBody struct {
	Identifier string `json:"identifier"`
}

// PostAuthVerifyOtpJSONBody defines parameters for PostAuthVerifyOtp.
type PostAuthVerifyOtpJSONBody struct {
	Identifier string `json:"identifier"`
	Otp        string `json:"otp"`
}

// BatchCreateSubStagesJSONBody defines parameters for BatchCreateSubStages.
type BatchCreateSubStagesJSONBody = []SubStage

// PostAuthRequestOtpJSONRequestBody defines body for PostAuthRequestOtp for application/json ContentType.
type PostAuthRequestOtpJSONRequestBody PostAuthRequestOtpJSONBody

// PostAuthVerifyOtpJSONRequestBody defines body for PostAuthVerifyOtp for application/json ContentType.
type PostAuthVerifyOtpJSONRequestBody PostAuthVerifyOtpJSONBody

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = Customer

// CreateProjectProgressJSONRequestBody defines body for CreateProjectProgress for application/json ContentType.
type CreateProjectProgressJSONRequestBody = ProjectProgress

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = Project

// CreateStageJSONRequestBody defines body for CreateStage for application/json ContentType.
type CreateStageJSONRequestBody = Stage

// UpdateStageJSONRequestBody defines body for UpdateStage for application/json ContentType.
type UpdateStageJSONRequestBody = Stage

// BatchCreateSubStagesJSONRequestBody defines body for BatchCreateSubStages for application/json ContentType.
type BatchCreateSubStagesJSONRequestBody = BatchCreateSubStagesJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request OTP for verification
	// (POST /auth/request-otp)
	PostAuthRequestOtp(c *fiber.Ctx) error
	// Verify OTP
	// (POST /auth/verify-otp)
	PostAuthVerifyOtp(c *fiber.Ctx) error
	// Create a new customer
	// (POST /customers)
	CreateCustomer(c *fiber.Ctx) error
	// Create a new project progress record
	// (POST /projectProgress)
	CreateProjectProgress(c *fiber.Ctx) error
	// Get project progress by ID
	// (GET /projectProgress/{progressId})
	GetProjectProgressByID(c *fiber.Ctx, progressId openapi_types.UUID) error
	// Update an existing project progress record
	// (PUT /projectProgress/{progressId})
	UpdateProjectProgress(c *fiber.Ctx, progressId openapi_types.UUID) error
	// Get all projects
	// (GET /projects)
	GetAllProjects(c *fiber.Ctx) error
	// Create a new project
	// (POST /projects)
	CreateProject(c *fiber.Ctx) error
	// Get a project by ID
	// (GET /projects/{projectId})
	GetProjectByID(c *fiber.Ctx, projectId openapi_types.UUID) error
	// Create a new stage
	// (POST /stages)
	CreateStage(c *fiber.Ctx) error
	// Get a stage by ID
	// (GET /stages/{stageId})
	GetStageByID(c *fiber.Ctx, stageId openapi_types.UUID) error
	// Update an existing stage
	// (PUT /stages/{stageId})
	UpdateStage(c *fiber.Ctx, stageId openapi_types.UUID) error
	// Batch create substages
	// (POST /subStages/batch)
	BatchCreateSubStages(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostAuthRequestOtp operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRequestOtp(c *fiber.Ctx) error {

	return siw.Handler.PostAuthRequestOtp(c)
}

// PostAuthVerifyOtp operation middleware
func (siw *ServerInterfaceWrapper) PostAuthVerifyOtp(c *fiber.Ctx) error {

	return siw.Handler.PostAuthVerifyOtp(c)
}

// CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomer(c *fiber.Ctx) error {

	return siw.Handler.CreateCustomer(c)
}

// CreateProjectProgress operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectProgress(c *fiber.Ctx) error {

	return siw.Handler.CreateProjectProgress(c)
}

// GetProjectProgressByID operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProgressByID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "progressId" -------------
	var progressId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "progressId", c.Params("progressId"), &progressId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter progressId: %w", err).Error())
	}

	return siw.Handler.GetProjectProgressByID(c, progressId)
}

// UpdateProjectProgress operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectProgress(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "progressId" -------------
	var progressId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "progressId", c.Params("progressId"), &progressId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter progressId: %w", err).Error())
	}

	return siw.Handler.UpdateProjectProgress(c, progressId)
}

// GetAllProjects operation middleware
func (siw *ServerInterfaceWrapper) GetAllProjects(c *fiber.Ctx) error {

	return siw.Handler.GetAllProjects(c)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(c *fiber.Ctx) error {

	return siw.Handler.CreateProject(c)
}

// GetProjectByID operation middleware
func (siw *ServerInterfaceWrapper) GetProjectByID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "projectId", c.Params("projectId"), &projectId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	return siw.Handler.GetProjectByID(c, projectId)
}

// CreateStage operation middleware
func (siw *ServerInterfaceWrapper) CreateStage(c *fiber.Ctx) error {

	return siw.Handler.CreateStage(c)
}

// GetStageByID operation middleware
func (siw *ServerInterfaceWrapper) GetStageByID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "stageId" -------------
	var stageId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "stageId", c.Params("stageId"), &stageId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter stageId: %w", err).Error())
	}

	return siw.Handler.GetStageByID(c, stageId)
}

// UpdateStage operation middleware
func (siw *ServerInterfaceWrapper) UpdateStage(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "stageId" -------------
	var stageId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "stageId", c.Params("stageId"), &stageId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter stageId: %w", err).Error())
	}

	return siw.Handler.UpdateStage(c, stageId)
}

// BatchCreateSubStages operation middleware
func (siw *ServerInterfaceWrapper) BatchCreateSubStages(c *fiber.Ctx) error {

	return siw.Handler.BatchCreateSubStages(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/auth/request-otp", wrapper.PostAuthRequestOtp)

	router.Post(options.BaseURL+"/auth/verify-otp", wrapper.PostAuthVerifyOtp)

	router.Post(options.BaseURL+"/customers", wrapper.CreateCustomer)

	router.Post(options.BaseURL+"/projectProgress", wrapper.CreateProjectProgress)

	router.Get(options.BaseURL+"/projectProgress/:progressId", wrapper.GetProjectProgressByID)

	router.Put(options.BaseURL+"/projectProgress/:progressId", wrapper.UpdateProjectProgress)

	router.Get(options.BaseURL+"/projects", wrapper.GetAllProjects)

	router.Post(options.BaseURL+"/projects", wrapper.CreateProject)

	router.Get(options.BaseURL+"/projects/:projectId", wrapper.GetProjectByID)

	router.Post(options.BaseURL+"/stages", wrapper.CreateStage)

	router.Get(options.BaseURL+"/stages/:stageId", wrapper.GetStageByID)

	router.Put(options.BaseURL+"/stages/:stageId", wrapper.UpdateStage)

	router.Post(options.BaseURL+"/subStages/batch", wrapper.BatchCreateSubStages)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTXPbNhD9Kxi0h3aGNp02uejmj0xGM02jadz2kPEBIlcSEhJggaVSjUf/vYMPkhIF",
	"K5RNyXKjk2UCBJZv377dBe5pIvNCChCo6eCe6mQGObM/r0uNMgdlfhdKFqCQgx1JpECW4Nuc8cz8j4sC",
	"6IBqVFxM6TKqJoxAaSnCMxQwhPQSzehEqpwhHdCUIZwhz4FGm6/wdG1uWfI0NE2wHIJbFkp+hgSH3ZYp",
	"i3Q3A5f1Ezk2+5hFKgj/5jgbue1HSk4VaP19olpsgsARcvvjRwUTOqA/xA0jY0/HuA1eAzZTii16c9hb",
	"pWSA8PbxtUzDELwHrdk0PAbVgpubK/in5ApSOvjkp0UrGzXL3gXs9HgESHR4BvQCfA/RsfuXJz48f3/o",
	"0zpCk28hQE+Bo5EpvOVurW5fp8vxR2RTOKTg2Q17YWUKOlG8QP6A1L3AbGDBMango/eM/h8ipVe/rZO2",
	"V2jsTdTrDXpBu1SsBTUXCFNQfWCtdwjYR0hCD3CaR1xMpFlhjXn0cjQkE6lIzgSbcjEl9mN0RCqZ1RHx",
	"XGp+mb9W8SPCREp0ObZvkTHDZEaMryza+tzYxjEzptzy5AsgeS8FR2nsJDdMz8aSqZRcjoY0onNQ2hn1",
	"6vzi/MJ8uixAsILTAf3VPopowXBmWRCzEmexSceg8UxiYYkitUWpNsF4hY6kxssSZ3+4yR+woC6Rg8Yr",
	"mS6qTAXCvsyKIuOJfT3+7Is2R/tNLvIUBPIJhw7lwsrcu6CHmsmoSrAPdCGFdlv9cnHxBEMfznZhtqyz",
	"5MPtiGiz69KKRZ4ztaAD6gElZtiQaA6KT7xFdqpzkn286Oajv+zcg7koot6qzq5zb7w0B9oKzPsH0pYb",
	"HebGi85pdeg/7K5rq8F1s/l4X23LMfXyncB9tad914GsxojPQkSXSQJaT8oss8nv9Y5e3maIa2wCVlyx",
	"lHjEyU9czFnGU5IyZD8bE94cwoShQFCCZUSDmoMi4CeuEsuxhDAi4GudUBzHAj3lNqa1O439EG6jYT0s",
	"74Lbr6M+aiXgEw13pWG7hCEKEqnSICvj+2rWMF0aE6cQYOg7wJbnrhbDG1urKJYDWiH9dE+5sdfUL7Sq",
	"JWmzPG0TLVpB5htV5fKu10yzJv+dmoFtJ2aB/qBozkE6hENdYe/QnGz2bBtmdMmaVbQpQMVh3goz8pXj",
	"rK6XqyLY18QNiDYYX+8/EipjhUQykaVIjyoG3wFuht54QYY3lhFlIK7+tH3PpvK/mLDqW+t9IxjQ+gPS",
	"q7bmOHnmSEOYIPAv12j6zC6Kr7ep+2WWjappT6TELufmAc3agOQ3rpHICWFZVrfpRxf3beM6FHr7LfCe",
	"qbDbFlanOu5xddx6FNuCzZ17dqnXdqnT/GnqkeeT3auYU33S6FSdKnxhYqjVlJ7bZMsdVe9HtPw5+2El",
	"a2XTdTDtwEmudpUr7fGsGRXf+2uDrUJl0e4sU9VFxLGK1DdI9cwC5Yw4ZnnytywduqZKjw7ImWcVvoNx",
	"9Fl7sGNmaKDxWtW86iAmtneED6fTKzPsc2p9ePN4ej3xLrv/nNuDQS1OVOdOwZxMuHC3sqfkvE5XyzMP",
	"WXN251ZzrznFbLXbMmEZSWEOmSxyEOi3oBEtVUYHdIZY6EEco73tPkPFki+gzvI3i2x8LkXKpxxZJhNg",
	"4pwVBV3eLf8LAAD//xMDMdHNKQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
